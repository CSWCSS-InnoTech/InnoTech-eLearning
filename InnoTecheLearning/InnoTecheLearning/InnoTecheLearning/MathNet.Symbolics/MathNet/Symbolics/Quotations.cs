namespace MathNet.Symbolics
{
    using <StartupCode$MathNet-Symbolics>;
    using MathNet.Numerics;
    using Microsoft.FSharp.Collections;
    using Microsoft.FSharp.Core;
    using Microsoft.FSharp.Quotations;
    using System;
    using System.Diagnostics;
    using System.Numerics;

    [RequireQualifiedAccess, CompilationMapping(SourceConstructFlags.Module)]
    public static class Quotations
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        internal static <PrivateImplementationDetails$MathNet-Symbolics>.T20973_497Bytes@ field20974@; // data size: 497 bytes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        internal static <PrivateImplementationDetails$MathNet-Symbolics>.T20975_500Bytes@ field20976@; // data size: 500 bytes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        internal static <PrivateImplementationDetails$MathNet-Symbolics>.T20977_476Bytes@ field20978@; // data size: 476 bytes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        internal static <PrivateImplementationDetails$MathNet-Symbolics>.T20977_476Bytes@ field20979@; // data size: 476 bytes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        internal static <PrivateImplementationDetails$MathNet-Symbolics>.T20973_497Bytes@ field20980@; // data size: 497 bytes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        internal static <PrivateImplementationDetails$MathNet-Symbolics>.T20973_497Bytes@ field20981@; // data size: 497 bytes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        internal static <PrivateImplementationDetails$MathNet-Symbolics>.T20982_512Bytes@ field20983@; // data size: 512 bytes

        [CompilationSourceName("parse")]
        public static Expression Parse(FSharpExpr q)
        {
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, FSharpList<Type>, FSharpList<FSharpExpr>>> option;
            FSharpExpr expr;
            Expression expression;
            Expression expression2;
        Label_0000:
            option = DerivedPatternsModule.SpecificCallPattern(FSharpExpr.Deserialize(typeof($Quotations), FSharpList<Type>.Empty, FSharpList<FSharpExpr>.Empty, new byte[] { 
                1, 1, 120, 1, 12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 110, 0x74, 0x33,
                50, 1, 0, 1, 1, 0x79, 1, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
                0x74, 0x2e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70,
                0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 1, 0x4e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e,
                0x43, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 110, 0x3d, 0x34, 0x2e,
                0x33, 0x2e, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x3d, 110,
                0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x2c, 0x20, 80, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
                0x79, 0x54, 0x6f, 0x6b, 0x65, 110, 0x3d, 0x62, 0x30, 0x33, 0x66, 0x35, 0x66, 0x37, 0x66, 0x31,
                0x31, 100, 0x35, 0x30, 0x61, 0x33, 0x61, 1, 11, 0x6f, 0x70, 0x5f, 0x41, 100, 100, 0x69,
                0x74, 0x69, 0x6f, 110, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70,
                0x6c, 0x65, 0x60, 50, 1, 13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72,
                0x69, 110, 0x67, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70, 0x6c,
                0x65, 0x60, 0x35, 1, 10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 110, 0x67, 0x65, 1,
                0x45, 0x44, 0x3a, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x4e, 0x45, 0x54,
                0x5c, 0x6d, 0x61, 0x74, 0x68, 110, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
                0x63, 0x73, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x73,
                0x5c, 0x43, 0x6f, 110, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
                0x6f, 110, 0x73, 0x2e, 0x66, 0x73, 0, 0x80, 0xd8, 5, 2, 0, 1, 2, 1, 2,
                0, 0, 2, 3, 1, 2, 1, 2, 0, 0, 0, 1, 4, 5, 6, 0,
                1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1,
                2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 8, 1, 1, 2,
                7, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 9, 2, 1, 1, 2,
                8, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1,
                1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0,
                12, 10, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0, 8, 1, 1, 2,
                9, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1,
                2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0,
                0, 0, 1, 0, 12, 11, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0,
                20, 15, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 20, 0x1d, 1, 1,
                2, 1, 2, 0, 0, 0, 1, 0, 20, 15, 1, 1, 2, 1, 2, 0,
                0, 0, 1, 0, 20, 30, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0,
                0
            })).Invoke(q);
            if ((option != null) && (option.Value.Item3.TailOrNull != null))
            {
                FSharpList<FSharpExpr> list = option.Value.Item3;
                if (list.TailOrNull.TailOrNull != null)
                {
                    FSharpList<FSharpExpr> list2 = list.TailOrNull;
                    if (list2.TailOrNull.TailOrNull == null)
                    {
                        expr = list2.HeadOrDefault;
                        FSharpExpr expr2 = list.HeadOrDefault;
                        return MathNet.Symbolics.Operators.add(Parse(expr2), Parse(expr));
                    }
                }
            }
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, FSharpList<Type>, FSharpList<FSharpExpr>>> option2 = DerivedPatternsModule.SpecificCallPattern(FSharpExpr.Deserialize(typeof($Quotations), FSharpList<Type>.Empty, FSharpList<FSharpExpr>.Empty, new byte[] { 
                1, 1, 120, 1, 12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 110, 0x74, 0x33,
                50, 1, 0, 1, 1, 0x79, 1, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
                0x74, 0x2e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70,
                0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 1, 0x4e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e,
                0x43, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 110, 0x3d, 0x34, 0x2e,
                0x33, 0x2e, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x3d, 110,
                0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x2c, 0x20, 80, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
                0x79, 0x54, 0x6f, 0x6b, 0x65, 110, 0x3d, 0x62, 0x30, 0x33, 0x66, 0x35, 0x66, 0x37, 0x66, 0x31,
                0x31, 100, 0x35, 0x30, 0x61, 0x33, 0x61, 1, 14, 0x6f, 0x70, 0x5f, 0x53, 0x75, 0x62, 0x74,
                0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 110, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
                0x54, 0x75, 0x70, 0x6c, 0x65, 0x60, 50, 1, 13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
                0x53, 0x74, 0x72, 0x69, 110, 0x67, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54,
                0x75, 0x70, 0x6c, 0x65, 0x60, 0x35, 1, 10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 110,
                0x67, 0x65, 1, 0x45, 0x44, 0x3a, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x4d, 0x61, 0x74, 0x68, 0x2e,
                0x4e, 0x45, 0x54, 0x5c, 0x6d, 0x61, 0x74, 0x68, 110, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x6d, 0x62,
                0x6f, 0x6c, 0x69, 0x63, 0x73, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
                0x69, 0x63, 0x73, 0x5c, 0x43, 0x6f, 110, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x51, 0x75, 0x6f, 0x74,
                0x61, 0x74, 0x69, 0x6f, 110, 0x73, 0x2e, 0x66, 0x73, 0, 0x80, 0xd8, 5, 2, 0, 1,
                2, 1, 2, 0, 0, 2, 3, 1, 2, 1, 2, 0, 0, 0, 1, 4,
                5, 6, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1,
                1, 2, 1, 2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 8,
                1, 1, 2, 7, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 9, 2,
                1, 1, 2, 8, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1,
                2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0,
                0, 1, 0, 12, 10, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0, 8,
                1, 1, 2, 9, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 1, 2,
                0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2,
                1, 2, 0, 0, 0, 1, 0, 12, 11, 1, 1, 2, 8, 2, 0, 0,
                0, 1, 0, 20, 0x10, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 20,
                0x1d, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 20, 0x10, 1, 1, 2,
                1, 2, 0, 0, 0, 1, 0, 20, 30, 1, 1, 2, 1, 2, 0, 0,
                0, 0, 0, 0
            })).Invoke(q);
            if ((option2 != null) && (option2.Value.Item3.TailOrNull != null))
            {
                FSharpList<FSharpExpr> list3 = option2.Value.Item3;
                if (list3.TailOrNull.TailOrNull != null)
                {
                    FSharpList<FSharpExpr> list4 = list3.TailOrNull;
                    if (list4.TailOrNull.TailOrNull == null)
                    {
                        expr = list4.HeadOrDefault;
                        expression = Parse(list3.HeadOrDefault);
                        expression2 = Parse(expr);
                        return MathNet.Symbolics.Operators.add(expression, MathNet.Symbolics.Operators.multiply(MathNet.Symbolics.Operators.minusOne, expression2));
                    }
                }
            }
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, FSharpList<Type>, FSharpList<FSharpExpr>>> option3 = DerivedPatternsModule.SpecificCallPattern(FSharpExpr.Deserialize(typeof($Quotations), FSharpList<Type>.Empty, FSharpList<FSharpExpr>.Empty, new byte[] { 
                1, 1, 110, 1, 12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 110, 0x74, 0x33,
                50, 1, 0, 1, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 70,
                0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
                0x74, 0x6f, 0x72, 0x73, 1, 0x4e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72,
                0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 110, 0x3d, 0x34, 0x2e, 0x33, 0x2e, 0x31,
                0x2e, 0x30, 0x2c, 0x20, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x3d, 110, 0x65, 0x75, 0x74,
                0x72, 0x61, 0x6c, 0x2c, 0x20, 80, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x54, 0x6f,
                0x6b, 0x65, 110, 0x3d, 0x62, 0x30, 0x33, 0x66, 0x35, 0x66, 0x37, 0x66, 0x31, 0x31, 100, 0x35,
                0x30, 0x61, 0x33, 0x61, 1, 0x10, 0x6f, 0x70, 0x5f, 0x55, 110, 0x61, 0x72, 0x79, 0x4e, 0x65,
                0x67, 0x61, 0x74, 0x69, 0x6f, 110, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54,
                0x75, 0x70, 0x6c, 0x65, 0x60, 50, 1, 13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53,
                0x74, 0x72, 0x69, 110, 0x67, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75,
                0x70, 0x6c, 0x65, 0x60, 0x35, 1, 10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 110, 0x67,
                0x65, 1, 0x45, 0x44, 0x3a, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x4e,
                0x45, 0x54, 0x5c, 0x6d, 0x61, 0x74, 0x68, 110, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f,
                0x6c, 0x69, 0x63, 0x73, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
                0x63, 0x73, 0x5c, 0x43, 0x6f, 110, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x51, 0x75, 0x6f, 0x74, 0x61,
                0x74, 0x69, 0x6f, 110, 0x73, 0x2e, 0x66, 0x73, 0, 0x80, 0xc1, 5, 2, 0, 1, 2,
                1, 2, 0, 0, 0, 1, 3, 4, 5, 0, 1, 1, 2, 1, 2, 0,
                0, 1, 1, 0, 0, 1, 0, 8, 1, 1, 2, 6, 2, 1, 1, 2,
                7, 2, 0, 1, 1, 2, 8, 2, 1, 1, 2, 7, 2, 0, 1, 1,
                2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0,
                1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0, 12, 9, 1, 1, 2,
                7, 2, 0, 0, 0, 1, 0, 8, 1, 1, 2, 8, 2, 1, 1, 2,
                7, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1,
                1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 12,
                10, 1, 1, 2, 7, 2, 0, 0, 0, 1, 0, 20, 0x11, 1, 1, 2,
                1, 2, 0, 0, 0, 1, 0, 20, 0x1d, 1, 1, 2, 1, 2, 0, 0,
                0, 1, 0, 20, 0x11, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 20,
                0x1f, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0
            })).Invoke(q);
            if ((option3 != null) && (option3.Value.Item3.TailOrNull != null))
            {
                FSharpList<FSharpExpr> list5 = option3.Value.Item3;
                if (list5.TailOrNull.TailOrNull == null)
                {
                    expr = list5.HeadOrDefault;
                    return MathNet.Symbolics.Operators.multiply(MathNet.Symbolics.Operators.minusOne, Parse(expr));
                }
            }
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, FSharpList<Type>, FSharpList<FSharpExpr>>> option4 = DerivedPatternsModule.SpecificCallPattern(FSharpExpr.Deserialize(typeof($Quotations), FSharpList<Type>.Empty, FSharpList<FSharpExpr>.Empty, new byte[] { 
                1, 5, 0x76, 0x61, 0x6c, 0x75, 0x65, 1, 12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
                0x49, 110, 0x74, 0x33, 50, 1, 0, 1, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
                0x66, 0x74, 0x2e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4f,
                0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 1, 0x4e, 70, 0x53, 0x68, 0x61, 0x72, 0x70,
                0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 110, 0x3d, 0x34,
                0x2e, 0x33, 0x2e, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x3d,
                110, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x2c, 0x20, 80, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
                0x65, 0x79, 0x54, 0x6f, 0x6b, 0x65, 110, 0x3d, 0x62, 0x30, 0x33, 0x66, 0x35, 0x66, 0x37, 0x66,
                0x31, 0x31, 100, 0x35, 0x30, 0x61, 0x33, 0x61, 1, 12, 0x6f, 0x70, 0x5f, 0x55, 110, 0x61,
                0x72, 0x79, 80, 0x6c, 0x75, 0x73, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54,
                0x75, 0x70, 0x6c, 0x65, 0x60, 50, 1, 13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53,
                0x74, 0x72, 0x69, 110, 0x67, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75,
                0x70, 0x6c, 0x65, 0x60, 0x35, 1, 10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 110, 0x67,
                0x65, 1, 0x45, 0x44, 0x3a, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x4e,
                0x45, 0x54, 0x5c, 0x6d, 0x61, 0x74, 0x68, 110, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f,
                0x6c, 0x69, 0x63, 0x73, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
                0x63, 0x73, 0x5c, 0x43, 0x6f, 110, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x51, 0x75, 0x6f, 0x74, 0x61,
                0x74, 0x69, 0x6f, 110, 0x73, 0x2e, 0x66, 0x73, 0, 0x80, 0xc1, 5, 2, 0, 1, 2,
                1, 2, 0, 0, 0, 1, 3, 4, 5, 0, 1, 1, 2, 1, 2, 0,
                0, 1, 1, 0, 0, 1, 0, 8, 1, 1, 2, 6, 2, 1, 1, 2,
                7, 2, 0, 1, 1, 2, 8, 2, 1, 1, 2, 7, 2, 0, 1, 1,
                2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0,
                1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0, 12, 9, 1, 1, 2,
                7, 2, 0, 0, 0, 1, 0, 8, 1, 1, 2, 8, 2, 1, 1, 2,
                7, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1,
                1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 12,
                10, 1, 1, 2, 7, 2, 0, 0, 0, 1, 0, 20, 0x12, 1, 1, 2,
                1, 2, 0, 0, 0, 1, 0, 20, 0x1d, 1, 1, 2, 1, 2, 0, 0,
                0, 1, 0, 20, 0x12, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 20,
                0x1f, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0
            })).Invoke(q);
            if ((option4 != null) && (option4.Value.Item3.TailOrNull != null))
            {
                FSharpList<FSharpExpr> list6 = option4.Value.Item3;
                if (list6.TailOrNull.TailOrNull == null)
                {
                    q = list6.HeadOrDefault;
                    goto Label_0000;
                }
            }
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, FSharpList<Type>, FSharpList<FSharpExpr>>> option5 = DerivedPatternsModule.SpecificCallPattern(FSharpExpr.Deserialize(typeof($Quotations), FSharpList<Type>.Empty, FSharpList<FSharpExpr>.Empty, new byte[] { 
                1, 1, 120, 1, 12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 110, 0x74, 0x33,
                50, 1, 0, 1, 1, 0x79, 1, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
                0x74, 0x2e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70,
                0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 1, 0x4e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e,
                0x43, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 110, 0x3d, 0x34, 0x2e,
                0x33, 0x2e, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x3d, 110,
                0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x2c, 0x20, 80, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
                0x79, 0x54, 0x6f, 0x6b, 0x65, 110, 0x3d, 0x62, 0x30, 0x33, 0x66, 0x35, 0x66, 0x37, 0x66, 0x31,
                0x31, 100, 0x35, 0x30, 0x61, 0x33, 0x61, 1, 11, 0x6f, 0x70, 0x5f, 0x4d, 0x75, 0x6c, 0x74,
                0x69, 0x70, 0x6c, 0x79, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70,
                0x6c, 0x65, 0x60, 50, 1, 13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72,
                0x69, 110, 0x67, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70, 0x6c,
                0x65, 0x60, 0x35, 1, 10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 110, 0x67, 0x65, 1,
                0x45, 0x44, 0x3a, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x4e, 0x45, 0x54,
                0x5c, 0x6d, 0x61, 0x74, 0x68, 110, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
                0x63, 0x73, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x73,
                0x5c, 0x43, 0x6f, 110, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
                0x6f, 110, 0x73, 0x2e, 0x66, 0x73, 0, 0x80, 0xd8, 5, 2, 0, 1, 2, 1, 2,
                0, 0, 2, 3, 1, 2, 1, 2, 0, 0, 0, 1, 4, 5, 6, 0,
                1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1,
                2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 8, 1, 1, 2,
                7, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 9, 2, 1, 1, 2,
                8, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1,
                1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0,
                12, 10, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0, 8, 1, 1, 2,
                9, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1,
                2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0,
                0, 0, 1, 0, 12, 11, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0,
                20, 0x13, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 20, 0x1d, 1, 1,
                2, 1, 2, 0, 0, 0, 1, 0, 20, 0x13, 1, 1, 2, 1, 2, 0,
                0, 0, 1, 0, 20, 30, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0,
                0
            })).Invoke(q);
            if ((option5 != null) && (option5.Value.Item3.TailOrNull != null))
            {
                FSharpList<FSharpExpr> list7 = option5.Value.Item3;
                if (list7.TailOrNull.TailOrNull != null)
                {
                    FSharpList<FSharpExpr> list8 = list7.TailOrNull;
                    if (list8.TailOrNull.TailOrNull == null)
                    {
                        expr = list8.HeadOrDefault;
                        return MathNet.Symbolics.Operators.multiply(Parse(list7.HeadOrDefault), Parse(expr));
                    }
                }
            }
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, FSharpList<Type>, FSharpList<FSharpExpr>>> option6 = DerivedPatternsModule.SpecificCallPattern(FSharpExpr.Deserialize(typeof($Quotations), FSharpList<Type>.Empty, FSharpList<FSharpExpr>.Empty, new byte[] { 
                1, 1, 120, 1, 12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 110, 0x74, 0x33,
                50, 1, 0, 1, 1, 0x79, 1, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
                0x74, 0x2e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x70,
                0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 1, 0x4e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e,
                0x43, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 110, 0x3d, 0x34, 0x2e,
                0x33, 0x2e, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x3d, 110,
                0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x2c, 0x20, 80, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
                0x79, 0x54, 0x6f, 0x6b, 0x65, 110, 0x3d, 0x62, 0x30, 0x33, 0x66, 0x35, 0x66, 0x37, 0x66, 0x31,
                0x31, 100, 0x35, 0x30, 0x61, 0x33, 0x61, 1, 11, 0x6f, 0x70, 0x5f, 0x44, 0x69, 0x76, 0x69,
                0x73, 0x69, 0x6f, 110, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70,
                0x6c, 0x65, 0x60, 50, 1, 13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72,
                0x69, 110, 0x67, 1, 14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70, 0x6c,
                0x65, 0x60, 0x35, 1, 10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x61, 110, 0x67, 0x65, 1,
                0x45, 0x44, 0x3a, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x4e, 0x45, 0x54,
                0x5c, 0x6d, 0x61, 0x74, 0x68, 110, 0x65, 0x74, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
                0x63, 0x73, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x73,
                0x5c, 0x43, 0x6f, 110, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
                0x6f, 110, 0x73, 0x2e, 0x66, 0x73, 0, 0x80, 0xd8, 5, 2, 0, 1, 2, 1, 2,
                0, 0, 2, 3, 1, 2, 1, 2, 0, 0, 0, 1, 4, 5, 6, 0,
                1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1,
                2, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 8, 1, 1, 2,
                7, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 9, 2, 1, 1, 2,
                8, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1,
                1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0,
                12, 10, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0, 8, 1, 1, 2,
                9, 2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1,
                2, 1, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2, 0,
                0, 0, 1, 0, 12, 11, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0,
                20, 20, 1, 1, 2, 1, 2, 0, 0, 0, 1, 0, 20, 0x1d, 1, 1,
                2, 1, 2, 0, 0, 0, 1, 0, 20, 20, 1, 1, 2, 1, 2, 0,
                0, 0, 1, 0, 20, 30, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0,
                0
            })).Invoke(q);
            if ((option6 != null) && (option6.Value.Item3.TailOrNull != null))
            {
                FSharpList<FSharpExpr> list9 = option6.Value.Item3;
                if (list9.TailOrNull.TailOrNull != null)
                {
                    FSharpList<FSharpExpr> list10 = list9.TailOrNull;
                    if (list10.TailOrNull.TailOrNull == null)
                    {
                        expr = list10.HeadOrDefault;
                        expression = Parse(list9.HeadOrDefault);
                        expression2 = Parse(expr);
                        return MathNet.Symbolics.Operators.multiply(expression, MathNet.Symbolics.Operators.invert(expression2));
                    }
                }
            }
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, FSharpList<Type>, FSharpList<FSharpExpr>>> option7 = DerivedPatternsModule.SpecificCallPattern(FSharpExpr.Deserialize(typeof($Quotations), FSharpList<Type>.Empty, FSharpList<FSharpExpr>.Empty, new byte[] { 
                1, 1, 120, 1, 13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x6f, 0x75, 0x62,
                0x6c, 0x65, 1, 0, 1, 1, 0x79, 1, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f,
                0x66, 0x74, 0x2e, 70, 0x53, 0x68, 0x61, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4f,
                0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 1, 0x4e, 70, 0x53, 0x68, 0x61, 0x72, 0x70,
                0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 110, 0x3d, 0x34,
                0x2e, 0x33, 0x2e, 0x31, 0x2e, 0x30, 0x2c, 0x20, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x3d,
                110, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x2c, 0x20, 80, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
                0x65, 0x79, 0x54, 0x6f, 0x6b, 0x65, 110, 0x3d, 0x62, 0x30, 0x33, 0x66, 0x35, 0x66, 0x37, 0x66,
                0x31, 0x31, 100, 0x35, 0x30, 0x61, 0x33, 0x61, 1, 0x11, 0x6f, 0x70, 0x5f, 0x45, 120, 0x70,
                0x6f, 110, 0x65, 110, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 110, 1, 14, 0x53, 0x79, 0x73,
                0x74, 0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x60, 50, 1, 13, 0x53, 0x79, 0x73,
                0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x69, 110, 0x67, 1, 14, 0x53, 0x79, 0x73, 0x74,
                0x65, 0x6d, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x60, 0x35, 1, 12, 0x53, 0x79, 0x73, 0x74,
                0x65, 0x6d, 0x2e, 0x49, 110, 0x74, 0x33, 50, 1, 10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52,
                0x61, 110, 0x67, 0x65, 1, 0x45, 0x44, 0x3a, 0x5c, 0x44, 0x65, 0x76, 0x5c, 0x4d, 0x61, 0x74,
                0x68, 0x2e, 0x4e, 0x45, 0x54, 0x5c, 0x6d, 0x61, 0x74, 0x68, 110, 0x65, 0x74, 0x2d, 0x73, 0x79,
                0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x63, 0x73, 0x5c, 0x73, 0x72, 0x63, 0x5c, 0x53, 0x79, 0x6d, 0x62,
                0x6f, 0x6c, 0x69, 0x63, 0x73, 0x5c, 0x43, 0x6f, 110, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x51, 0x75,
                0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 110, 0x73, 0x2e, 0x66, 0x73, 0, 0x80, 210, 5, 2,
                0, 1, 2, 1, 2, 0, 0, 2, 3, 1, 2, 1, 2, 0, 0, 0,
                1, 4, 5, 6, 0, 1, 1, 2, 1, 2, 0, 1, 1, 2, 1, 2,
                0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 8, 1, 1, 2, 7,
                2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 9, 2, 1, 1, 2, 8,
                2, 0, 1, 1, 2, 10, 2, 0, 1, 1, 2, 10, 2, 0, 1, 1,
                2, 10, 2, 0, 1, 1, 2, 10, 2, 0, 0, 0, 0, 1, 0, 12,
                11, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0, 8, 1, 1, 2, 9,
                2, 1, 1, 2, 8, 2, 0, 1, 1, 2, 10, 2, 0, 1, 1, 2,
                10, 2, 0, 1, 1, 2, 10, 2, 0, 1, 1, 2, 10, 2, 0, 0,
                0, 1, 0, 12, 12, 1, 1, 2, 8, 2, 0, 0, 0, 1, 0, 20,
                0x15, 1, 1, 2, 10, 2, 0, 0, 0, 1, 0, 20, 0x1d, 1, 1, 2,
                10, 2, 0, 0, 0, 1, 0, 20, 0x15, 1, 1, 2, 10, 2, 0, 0,
                0, 1, 0, 20, 0x1f, 1, 1, 2, 10, 2, 0, 0, 0, 0, 0, 0
            })).Invoke(q);
            if ((option7 != null) && (option7.Value.Item3.TailOrNull != null))
            {
                FSharpList<FSharpExpr> list11 = option7.Value.Item3;
                if (list11.TailOrNull.TailOrNull != null)
                {
                    FSharpList<FSharpExpr> list12 = list11.TailOrNull;
                    if (list12.TailOrNull.TailOrNull == null)
                    {
                        expr = list12.HeadOrDefault;
                        return MathNet.Symbolics.Operators.pow(Parse(list11.HeadOrDefault), Parse(expr));
                    }
                }
            }
            FSharpOption<short> option8 = DerivedPatternsModule.Int16Pattern(q);
            if (option8 != null)
            {
                return Expression.NewNumber(BigRational.FromInt(option8.Value));
            }
            FSharpOption<int> option9 = DerivedPatternsModule.Int32Pattern(q);
            if (option9 != null)
            {
                return Expression.NewNumber(BigRational.FromInt(option9.Value));
            }
            FSharpOption<long> option10 = DerivedPatternsModule.Int64Pattern(q);
            if (option10 != null)
            {
                return Expression.NewNumber(BigRational.FromBigInt(new BigInteger(option10.Value)));
            }
            FSharpOption<ushort> option11 = DerivedPatternsModule.UInt16Pattern(q);
            if (option11 != null)
            {
                int x = (int) option11.Value;
                return Expression.NewNumber(BigRational.FromInt(x));
            }
            FSharpOption<uint> option12 = DerivedPatternsModule.UInt32Pattern(q);
            if (option12 != null)
            {
                long num3 = (long) ((ulong) option12.Value);
                return Expression.NewNumber(BigRational.FromBigInt(new BigInteger(num3)));
            }
            FSharpOption<ulong> option13 = DerivedPatternsModule.UInt64Pattern(q);
            if (option13 != null)
            {
                BigInteger integer = new BigInteger(option13.Value);
                return Expression.NewNumber(BigRational.FromBigInt(integer));
            }
            FSharpOption<double> option14 = DerivedPatternsModule.DoublePattern(q);
            if (option14 != null)
            {
                return Values.unpack(ValueModule.real(option14.Value));
            }
            FSharpOption<float> option15 = DerivedPatternsModule.SinglePattern(q);
            if (option15 != null)
            {
                double num7 = (double) option15.Value;
                return Values.unpack(ValueModule.real(num7));
            }
            FSharpOption<FSharpVar> option16 = PatternsModule.VarPattern(q);
            if (option16 != null)
            {
                return Expression.NewIdentifier(Symbol.NewSymbol(option16.Value.Name));
            }
            FSharpOption<Tuple<FSharpOption<FSharpExpr>, PropertyInfo, FSharpList<FSharpExpr>>> option17 = PatternsModule.PropertyGetPattern(q);
            if (option17 != null)
            {
                return Expression.NewIdentifier(Symbol.NewSymbol(option17.Value.Item2.Name));
            }
            FSharpOption<Tuple<FSharpVar, FSharpExpr, FSharpExpr>> option18 = PatternsModule.LetPattern(q);
            if (option18 == null)
            {
                FSharpOption<Tuple<FSharpVar, FSharpExpr>> option19 = PatternsModule.LambdaPattern(q);
                if (option19 == null)
                {
                    throw new Exception("not supported");
                }
                q = option19.Value.Item2;
            }
            else
            {
                q = option18.Value.Item3;
            }
            goto Label_0000;
        }
    }
}

